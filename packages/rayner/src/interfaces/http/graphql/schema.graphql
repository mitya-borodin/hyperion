enum UserRole {
  UNKNOWN
  OPERATOR
  ADMIN
}

enum MacrosType {
  LIGHTING
}

enum ControlType {
  SWITCH
  ILLUMINATION
}

enum LightingLevel {
  HIGHT
  MIDDLE
  LOW
  ACCIDENT
}

directive @auth(requires: [UserRole!]!) on OBJECT | FIELD_DEFINITION

scalar Upload

type DefaultOutput {
  message: String
}

type Error {
  code: Int!
  message: String!
}

input PaginationInput {
  page: Int = 1
  limit: Int = 25
}

type PaginationOutput {
  total: Int!
  page: Int!
  limit: Int!
}

input TitleInput {
  ru: String!
  en: String!
}

type TitleOutput {
  ru: String!
  en: String!
}

input MarkupInput {
  title: TitleInput!
  description: String!
  order: Int!
  color: String!
}

type MarkupOutput {
  title: TitleOutput!
  description: String!
  order: Int!
  color: String!
}

input MarkupDevice {
  deviceId: ID!

  labels: [String!]!

  markup: MarkupInput!
}

input MarkupControl {
  deviceId: ID!
  controlId: ID!

  labels: [String!]!

  markup: MarkupInput!
}

type Control {
  id: ID!

  title: TitleOutput!
  order: Int!
  readonly: Boolean!
  type: ControlType!
  units: String!
  max: Float!
  min: Float!
  precision: Float!
  value: String!
  topic: String
  error: String!
  meta: String!

  labels: [String!]!

  markup: MarkupOutput!
}

type Device {
  id: ID!

  driver: String!
  title: TitleOutput!

  error: String!
  meta: String!

  labels: [String!]!

  markup: MarkupOutput!

  controls: [Control!]
}

input SetControlValue {
  deviceId: String!
  controlId: String!

  value: String!
}

## MacrosWireframe
# Используется только как витрина доступных макросов для установки.
# Возможность установки нескольких макросов одного типа
# задается реализацией макроса.
#
# Список хардкодится в реализации, и новые MacrosWireframe, добавляются
# по средством разработки.
#
type MacrosWireframe {
  ## Уникальный тип макроса
  #
  type: ID!

  ## Подробное название
  #
  name: String!

  ## Подробное описание
  #
  description: String!

  ## Пример конфигурации, только для чтения
  #
  settings: String!
}

## MacrosSetup
# Задает интерфейс добавления макроса, для каждого макроса он уникальный.
# union не может быть использован как input type, по этому будем использовать
# список не обязательных полей.
#
input MacrosSetup {
  lighting: LightingMacrosSetup
}

## Macros
# Задает интерфейс установленного макроса, для каждого макроса он уникален.
#
union Macros = LightingMacros

type MacrosOutput {
  macros: Macros
  error: Error!
}

input RemoveMacrosInput {
  id: ID!
}

type DeviceSubscriptionEvent {
  type: String!
  error: Error!
  value: Device!
}

type MacrosSubscriptionEvent {
  type: String!
  error: Error!
  value: Macros!
}

type Query {
  getMacrosWireframes: [MacrosWireframe!]!
}

type Mutation {
  setControlValue(input: SetControlValue!): Device!

  markupDevice(input: MarkupDevice!): Device!
  markupControl(input: MarkupControl!): Device!

  setupMacros(input: MacrosSetup!): MacrosOutput!
  updateMacros(input: MacrosSetup!): MacrosOutput!
  removeMacros(input: RemoveMacrosInput!): MacrosOutput!
}

type Subscription {
  device: [DeviceSubscriptionEvent!]!
  macros: [MacrosSubscriptionEvent!]!
}
