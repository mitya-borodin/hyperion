import debug from 'debug';

import { stringify } from '../../helpers/json-stringify';
import { ControlType } from '../control-type';
import { HyperionDevice } from '../hyperion-device';

import { Macros, MacrosAccept, MacrosParameters, MacrosType } from './macros';

const logger = debug('hyperion-water-supply-macros');

/**
 * ! SETTINGS
 */
export type WaterSupplyMacrosSettings = {
  /**
   * –î–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏, –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –∏—Ö –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ.
   */
  readonly leaks: Array<{
    readonly deviceId: string;
    readonly controlId: string;
  }>;
  /**
   * –°—á–µ—Ç—á–∏–∫ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã, –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ–¥–∏–Ω, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ª–∏–Ω–∏—è–º.
   */
  readonly coldWaterCounter: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly ticBy: 'FRONT' | 'BACK' | 'BOTH';
    readonly valueByTic: number;
  }>;
  /**
   * –°—á–µ—Ç—á–∏–∫ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã, –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ–¥–∏–Ω, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ª–∏–Ω–∏—è–º.
   */
  readonly hotWaterCounter: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly ticBy: 'FRONT' | 'BACK' | 'BOTH';
    readonly valueByTic: number;
  }>;
  /**
   * –†–µ–ª–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞—Å–æ—Å–∞, –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ–¥–Ω–æ, –Ω–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–æ—Å–æ–≤ —Ç–æ –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –∏—Ö –≤—Å–µ.
   * –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ù–û —Ä–µ–ª–µ, —á—Ç–æ–±—ã –ø—Ä–∏ –ø—Ä–æ–ø–∞–¥–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è —Ä–µ–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–æ—Å—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.
   */
  readonly pump: Array<{
    readonly deviceId: string;
    readonly controlId: string;
  }>;
  /**
   * –î–≤—É—Ö-—Ç—Ä–µ—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–æ—Ä–Ω–æ–π –∞—Ä–º–∞—Ç—É—Ä–æ–π.
   * –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏ –ø—Ä–æ—Ç–µ—á–∫–∏.
   * –ó–∞–ø–æ—Ä–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å:
   * 1. –ö—Ä–∞–Ω —Å —Ñ–∞–∑–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –±–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
   * 2. –ö—Ä–∞–Ω —Å —Ñ–∞–∑–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, —Å —Å–∏–≥–Ω–∞–ª—å–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
   * 3. –ö–ª–∞–ø–∞–Ω —Å —Ä–µ–ª–µ–π–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç–æ/–∑–∞–∫—Ä—ã—Ç–æ, –±–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π.
   * 4. –ö—Ä–∞–Ω —Å –ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º 0-10–í
   */
  readonly valve: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly device: 'PHASE' | 'VALVE' | 'ANALOG';
    readonly functionality: 'OPENING' | 'CLOSING' | 'POWER' | 'SIGNAL' | 'POSITION';
    /**
     * –ú–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∫—Ä–∞–Ω—ã —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ –ø—Ä–æ—Ç–µ—á–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å –≤—Å—é –≤–æ–¥—É.
     */
    readonly leaks: Array<{
      readonly deviceId: string;
      readonly controlId: string;
    }>;
  }>;
  /**
   * –ù–∞—Å–æ—Å —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏, —á–∞—â–µ –≤—Å–µ–≥–æ –æ–Ω –±—É–¥–µ—Ç –æ–¥–∏–Ω, –Ω–æ –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏
   */
  readonly recycling: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    /**
     * –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –∏–∑ –¥–∞—Ç—á–∏–∫–æ–≤, –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ —Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç—Å—è.
     *
     * –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Ç–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.
     *
     * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ—Ç–µ—á–∫–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, –ª–∏–±–æ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫
     * –ø—Ä–æ—Ç–µ—á–∫–∏, –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –ª—é–±–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞.
     */
    readonly switcher: Array<{
      readonly deviceId: string;
      readonly controlId: string;
      readonly trigger: string;
    }>;
    readonly motion: Array<{
      readonly deviceId: string;
      readonly controlId: string;
      readonly trigger: number;
    }>;
    readonly noise: Array<{
      readonly deviceId: string;
      readonly controlId: string;
      readonly trigger: number;
    }>;
    readonly leaks: Array<{
      readonly deviceId: string;
      readonly controlId: string;
    }>;
    /**
     * –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏, —Ç–æ —Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è
     * –≤–æ –≤—Ä–µ–º—è ON –∏ –≤—ã–∫–ª—é—á–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è OFF.
     *
     * –í—Ä–µ–º—è –∑–∞–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0-24 —á–∞—Å–∞.
     * –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è, —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Å—É–º–º–µ.
     */
    readonly schedule: Array<{
      on: string;
      off: string;
    }>;
  }>;
  /**
   * –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–æ–π–ª–µ—Ä–∞ –∏–ª–∏ –±–æ–π–ª–µ—Ä–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ.
   * –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ hotWaterTemperature –≤ WaterSupplyMacrosPublicState –Ω–∞ –∫–∞–∫–æ–º –ª–∏–±–æ –¥–∞—Ç—á–∏–∫–µ,
   * —Ç–æ –≤–∫–ª—é—á–∏—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ–π–ª–µ—Ä–∞.
   * –í–∫–ª—é—á–∏—Ç—Å—è boilerPump, –∏ –≤ –º–∞–∫—Ä–æ—Å–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É.
   */
  readonly hotWaterTemperature: Array<{
    readonly deviceId: string;
    readonly controlId: string;
  }>;
  /**
   * –ù–∞—Å–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π–ª–µ—Ä–∞ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–æ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ–π–ª–µ—Ä–æ–≤.
   * –í–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π–ª–µ—Ä–∞.
   */
  readonly boilerPump: Array<{
    readonly deviceId: string;
    readonly controlId: string;
  }>;
};

/**
 * ! STATE
 */
export type WaterSupplyMacrosPublicState = {
  water: 'ON' | 'OFF';
  timer: 'FORCE' | 'DEFAULT';
  hotWaterTemperature: number;
};

type WaterSupplyMacrosPrivateState = {
  isLeak: boolean;
  pump: 'ON' | 'OFF';
  valve: 'ON' | 'OFF';
  recycling: 'ON' | 'OFF';
};

type WaterSupplyMacrosState = WaterSupplyMacrosPublicState & WaterSupplyMacrosPrivateState;

/**
 * ! OUTPUT
 */
type WaterSupplyMacrosNextOutput = {
  readonly pump: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly value: string;
  }>;
  readonly valve: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly device: 'PHASE' | 'VALVE' | 'ANALOG';
    readonly functionality: 'OPENING' | 'CLOSING' | 'POWER' | 'SIGNAL' | 'POSITION';
    readonly value: string;
  }>;
  readonly boilerPump: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly value: string;
  }>;
};

type LightingMacrosParameters = MacrosParameters<WaterSupplyMacrosSettings, WaterSupplyMacrosPublicState>;

export class LightingMacros extends Macros<MacrosType.WATER_SUPPLY, WaterSupplyMacrosSettings, WaterSupplyMacrosState> {
  private nextOutput: WaterSupplyMacrosNextOutput;

  constructor(parameters: LightingMacrosParameters) {
    super({
      ...parameters,
      type: MacrosType.WATER_SUPPLY,
      state: {
        water: 'OFF',
        timer: 'DEFAULT',
        hotWaterTemperature: 60,
        isLeak: false,
        pump: 'OFF',
        valve: 'OFF',
        recycling: 'OFF',
      },
      controlTypes: {
        leaks: ControlType.SWITCH,
        coldWaterCounter: ControlType.SWITCH,
        hotWaterCounter: ControlType.SWITCH,
        pump: ControlType.SWITCH,
        valve: ControlType.SWITCH,
        recycling: ControlType.SWITCH,
        hotWaterTemperature: ControlType.TEMPERATURE,
        boilerPump: ControlType.SWITCH,
      },
    });

    this.nextOutput = {
      pump: [],
      valve: [],
      boilerPump: [],
    };
  }

  setState = (nextState: WaterSupplyMacrosState): void => {};

  accept = ({ previous, current, devices, controls }: MacrosAccept): void => {
    super.accept({ previous, current, devices, controls });

    if (this.isDevicesReady() && this.isControlValueHasBeenChanged(current)) {
      this.execute();
    }
  };

  protected execute = () => {
    let stop = this.applyStateToOutput();

    if (stop) {
      return;
    }

    stop = this.applyInputToState();

    if (stop) {
      return;
    }

    this.applyOutputToState();
  };

  protected applyStateToOutput = () => {
    return false;
  };

  protected applyInputToState = () => {
    return false;
  };

  protected applyOutputToState() {}

  protected computeNextOutput = (value: string) => {
    const nextOutput: WaterSupplyMacrosNextOutput = {
      pump: [],
      valve: [],
      boilerPump: [],
    };

    this.nextOutput = nextOutput;

    logger('The next output was computed ‚è≠Ô∏è üçã');
    logger(
      stringify({
        name: this.name,
        nextState: this.state,
        nextOutput: this.nextOutput,
      }),
    );
  };

  protected applyNextOutput = () => {};

  /**
   * ! –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
   */
  protected isControlValueHasBeenChanged = (device: HyperionDevice): boolean => {
    return super.isControlValueHasBeenChanged(device, [...this.settings.leaks]);
  };

  protected isSwitchHasBeenPress = (): boolean => {
    return super.isSwitchHasBeenPress(this.settings.leaks);
  };

  protected isSwitchHasBeenRelease = (): boolean => {
    return super.isSwitchHasBeenRelease(this.settings.leaks);
  };
}
