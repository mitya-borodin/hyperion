import EventEmitter from 'node:events';

import { addHours } from 'date-fns';
import debug from 'debug';
import cloneDeep from 'lodash.clonedeep';
import debounce from 'lodash.debounce';
import { v4 } from 'uuid';

import { JsonObject } from '../../helpers/json-types';
import { ControlType } from '../control-type';
import { HyperionDeviceControl } from '../hyperion-control';
import { HyperionDevice } from '../hyperion-device';

import { getControlId } from './get-control-id';
import { MacrosType } from './showcase';

const logger = debug('hyperion-macros');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –º–∞–∫—Ä–æ—Å–∞ –±—ã–ª–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:
 * 1. –ñ–µ–ª–∞–Ω–∏–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –º–∞–∫—Ä–æ—Å–∞
 * 2. –†–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ–±—â–∏–µ
 */

export type SettingsBase = {
  devices: { [key: string]: Array<{ deviceId: string; controlId: string }> };
  properties: { [key: string]: unknown };
};

export type MacrosParameters<SETTINGS, STATE> = {
  readonly eventBus: EventEmitter;

  readonly id?: string;
  readonly name: string;
  readonly description: string;
  readonly labels: string[];

  readonly settings: SETTINGS;

  readonly state: STATE;

  /**
   * –í–µ—Ä—Å–∏—è —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –µ—Å—Ç—å –ª–∏ –±—Ä–µ–π–∫–∏–Ω–≥–∏ –≤ –º–∞–∫—Ä–æ—Å–µ.
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä—Å–∏–π –¥–µ–ª–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è settings.
   * –í–µ—Ä—Å–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞, –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–≤–µ–ª–∏—á–∏–Ω–∞ –µ—Å–ª–∏ –≤ –º–∞–∫—Ä–æ—Å–µ –µ—Å—Ç—å –±—Ä–µ–π–∫–∏–≥,
   *  –∞ —Ç–∞–∫ –∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã settings –∏–∑ –æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ –¥—Ä—É–≥—É—é.
   */
  readonly version?: number;

  readonly devices: Map<string, HyperionDevice>;
  readonly controls: Map<string, HyperionDeviceControl>;
};

type PrivateMacrosParameters<TYPE extends MacrosType> = {
  readonly type: TYPE;
  readonly controlTypes: { [key: string]: ControlType };

  readonly version: number;
};

export type MacrosAccept = {
  previous: Map<string, HyperionDeviceControl>;
  current: HyperionDevice;
  devices: Map<string, HyperionDevice>;
  controls: Map<string, HyperionDeviceControl>;
};

export type MacrosEject<SETTINGS extends SettingsBase = SettingsBase, STATE extends JsonObject = JsonObject> = {
  type: MacrosType;

  id: string;
  name: string;
  description: string;
  labels: string[];

  settings: SETTINGS;

  state: STATE;
};

export abstract class Macros<
  TYPE extends MacrosType = MacrosType,
  SETTINGS extends SettingsBase = SettingsBase,
  STATE extends JsonObject = JsonObject,
> {
  /**
   * ! –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–∞–∫—Ä–æ—Å–æ–≤
   */
  protected readonly eventBus: EventEmitter;

  /**
   * ! –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  protected devices: Map<string, HyperionDevice>;
  protected previous: Map<string, HyperionDeviceControl>;
  protected controls: Map<string, HyperionDeviceControl>;

  /**
   * ! –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å–µ—Ö –º–∞–∫—Ä–æ—Å–æ–≤
   */
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly labels: string[];

  /**
   * ! –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–∫—Ä–æ—Å–∞
   */
  readonly type: TYPE;
  readonly settings: SETTINGS;
  readonly version: number;
  readonly controlIds: Set<string>;
  protected readonly state: STATE;
  protected readonly controlTypes: { [key: string]: ControlType };

  constructor({
    eventBus,
    id,
    name,
    description,
    labels,
    type,
    settings,
    version,
    state,
    controlTypes,
  }: MacrosParameters<SETTINGS, STATE> & PrivateMacrosParameters<TYPE>) {
    this.eventBus = eventBus;

    this.previous = new Map();
    this.devices = new Map();
    this.controls = new Map();

    this.id = id ?? v4();
    this.name = name;
    this.description = description;
    this.labels = labels;

    this.type = type;
    this.settings = settings;
    this.state = state;
    this.version = version;

    this.controlTypes = controlTypes;

    this.controlIds = new Set();

    for (const name in this.settings.devices) {
      for (const item of this.settings.devices[name]) {
        this.controlIds.add(getControlId(item));
      }
    }

    this.applyExternalToState = debounce(this.applyExternalToState.bind(this), 500, {
      leading: false,
      trailing: true,
    });

    this.applyExternalToState();
  }

  abstract setState(nextStateJson: string): void;

  accept({ previous, current, devices, controls }: MacrosAccept): void {
    this.previous = previous;
    this.devices = devices;
    this.controls = controls;

    if (this.isDevicesReady() && this.isControlValueHasBeenChanged(current)) {
      this.execute();
    }
  }

  /**
   * –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.
   * –í–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É –º–∞–∫—Ä–æ—Å–∞, –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
   */
  protected execute = () => {
    /**
     * –ù–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤, –ø–æ —ç—Ç–æ–º—É –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–µ—Ä–≤–æ–π,
     *  –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–∞–¥–∏—è–º–∏.
     */
    this.applyExternalToState();

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–∫—Ä–æ—Å–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
     */
    const stop = this.applyStateToOutput();

    if (stop) {
      return;
    }

    this.applyInputToState();
  };

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–∫—Ä–æ—Å–∞, –∑–∞ —á–∞—Å—Ç—É—é —ç—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ force —Å–æ—Å—Ç–æ—è–Ω–∏—è.
   * –í —Å–ª—É—á–∞–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ force —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å—Å—è –∏ –±—É–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤,
   * –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É.
   */
  protected abstract applyStateToOutput(): boolean;

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –∫–æ—Ç–æ—Ä–æ–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–≥–∏–∫–µ –º–∞–∫—Ä–æ—Å–∞. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–∂–µ—Ç
   * –∏–∑–º–µ–Ω–∏—Ç—å—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –∏ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É. –í —Å–ª—É—á–∞–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤, —Ç–∞–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.
   */
  protected abstract applyInputToState(): boolean;

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∞–∫—Ä–æ—Å–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–∞–∫—Ä–æ—Å—ã
   * –∏–º–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –º–µ–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–∞–∫—Ä–æ—Å—ã, WEB GUI
   * –æ—Ç wirenboard, –∫–∞–∫–∏–º –ª–∏–±–æ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
   * –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ applyStateToOutput –∏ applyInputToState, –∏ –Ω–µ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤.
   */
  protected abstract applyExternalToState(): void;

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –≤—ã—á–∏—Å–ª—è—Ç—å –±—É–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–∫—Ä–æ—Å–∞.
   */
  protected abstract computeNextOutput(value: string): void;

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±—É–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É.
   */
  protected abstract applyNextOutput(): void;

  protected abstract destroy(): void;

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –º–∞–∫—Ä–æ—Å–∞ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î.
   */
  toJS = (): MacrosEject<SETTINGS, STATE> => {
    return cloneDeep({
      type: this.type,

      id: this.id,
      name: this.name,
      description: this.description,
      labels: this.labels,

      settings: this.settings,

      state: this.state,
    });
  };

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –∫–æ–Ω—Ç—Ä–æ–ª —É—á–∞—Å—Ç–≤—É—é—â–∏–π –≤ —Ä–∞–±–æ—Ç–µ –º–∞–∫—Ä–æ—Å–∞
   */
  protected isControlValueHasBeenChanged(device: HyperionDevice): boolean {
    for (const control of device.controls) {
      const id = getControlId({ deviceId: device.id, controlId: control.id });
      const isSuitableControl = this.controlIds.has(id);

      if (isSuitableControl) {
        const previous = this.previous.get(id);
        const current = this.controls.get(id);

        if (previous?.value !== current?.value) {
          // logger('A suitable control has been detected üïµÔ∏è‚Äç‚ôÇÔ∏è üïµÔ∏è‚Äç‚ôÇÔ∏è üïµÔ∏è‚Äç‚ôÇÔ∏è');
          // logger(
          //   stringify({
          //     macros: omit(this.toJS(), ['labels', 'settings']),
          //     device: { id: device.id, controls: device.controls.map(({ id, value }) => ({ id, value })) },
          //   }),
          // );

          return true;
        }
      }
    }

    return false;
  }

  /**
   * UP - –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å, "1", "true", —á—Ç–æ —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–µ –≤ –∏—Å—Ç–∏–Ω—É, –≤–∫–ª—é—á–µ–Ω–æ, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–º–∫–Ω—É—Ç—ã
   */
  protected isSwitchHasBeenUp(switches: Array<{ deviceId: string; controlId: string }>): boolean {
    return switches.some((item) => {
      const previous = this.previous.get(getControlId(item));
      const current = this.controls.get(getControlId(item));

      if (!previous || !current) {
        return false;
      }

      if (current.type === ControlType.SWITCH && previous.value !== current.value && current.value === current.on) {
        return true;
      }

      return false;
    });
  }

  /**
   * DOWN - –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å, "0", "false", —á—Ç–æ —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–µ –≤ –ª–æ–∂, –≤—ã–∫–ª—é—á–µ–Ω–æ, –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑–æ–º–∫–Ω—É—Ç—ã
   */
  protected isSwitchHasBeenDown(switches: Array<{ deviceId: string; controlId: string }>): boolean {
    return switches.some((item) => {
      const previous = this.previous.get(getControlId(item));
      const current = this.controls.get(getControlId(item));

      if (!previous || !current) {
        return false;
      }

      if (
        current.type === ControlType.SWITCH &&
        previous.value !== current.value &&
        previous.value === current.on &&
        current.value === current.off
      ) {
        return true;
      }

      return false;
    });
  }

  /**
   * –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –º–∞–∫—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã.
   * –ö–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –µ—Å–ª–∏ –ø—Ä–µ–∂–¥–µ –æ–Ω–∏ –Ω–µ–±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î.
   */
  protected isDevicesReady(): boolean {
    const isDevicesReady = Object.keys(this.settings.devices).every((key) => {
      const settings = this.settings.devices[key];

      return settings.every(({ deviceId, controlId }) => {
        if (typeof deviceId === 'string' && typeof controlId === 'string') {
          const control = this.controls.get(getControlId({ deviceId, controlId }));

          if (control?.type !== this.controlTypes[key]) {
            logger({
              deviceId,
              controlId,
              controlType: control?.type,
              key,
              settingsControlType: this.controlTypes[key],
              control: control ?? 'NOT FOUND',
            });
          }

          return control?.type === this.controlTypes[key];
        } else {
          return true;
        }
      });
    });

    if (!isDevicesReady) {
      logger('The devices are not ready for use in this macro üö® üö® üö®');
      logger({ name: this.name, labels: this.labels, devices: this.devices.size, controls: this.controls.size });
    }

    return isDevicesReady;
  }

  /**
   * –ú–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö
   */
  protected hasHourOverlap(from: number, to: number, debug = false) {
    if (to <= from) {
      to = to + 24;
    }

    const year = new Date().getFullYear();
    const month = new Date().getMonth();
    const date = new Date().getDate();

    const fromMs = addHours(new Date(year, month, date, 0, 0, 0, 0), from).getTime();
    const toMs = addHours(new Date(year, month, date, 0, 0, 0, 0), to).getTime();
    const nowMs = addHours(new Date(), 0).getTime();

    if (debug) {
      logger({
        name: this.name,
        message: 'hasHourOverlap',
        from,
        to,
        fromMs,
        toMs,
        nowMs,
        hasHourOverlap: nowMs >= fromMs && nowMs <= toMs,
      });
    }

    return nowMs >= fromMs && nowMs <= toMs;
  }
}
