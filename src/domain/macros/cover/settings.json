{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/CoverMacrosSettings",
  "definitions": {
    "CoverMacrosSettings": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "object",
          "properties": {
            "switchers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "switch",
                    "description": "Переключатели это устройства у которых явно определено значение в состоянии ON и в состоянии OFF."
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "buttons": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "enum",
                    "description": "Произвольные устройства, у которых может быть несколько состояний и они все перечислены в enum.\n\nПользователь может указать на какие состояния реагировать.\n\nРазработчики могут предложить связать значения из enum с настройками которые используются в макросе, для реализации более сложных сценариев."
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "lightings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "switch",
                    "description": "Переключатели это устройства у которых явно определено значение в состоянии ON и в состоянии OFF."
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "illuminations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "lux"
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "motions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "value"
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "noises": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "sound_level"
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "temperatures": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "temperature"
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              }
            },
            "states": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "enum",
                    "description": "Произвольные устройства, у которых может быть несколько состояний и они все перечислены в enum.\n\nПользователь может указать на какие состояния реагировать.\n\nРазработчики могут предложить связать значения из enum с настройками которые используются в макросе, для реализации более сложных сценариев."
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              },
              "description": "Контрол переключения состояния шторы."
            },
            "positions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string"
                  },
                  "controlId": {
                    "type": "string"
                  },
                  "controlType": {
                    "type": "string",
                    "const": "value"
                  }
                },
                "required": ["deviceId", "controlId", "controlType"],
                "additionalProperties": false
              },
              "description": "Контрол позволяет увидеть положение шторы после окончания движения, и задать то положение в которое должна прийти штора."
            }
          },
          "required": [
            "switchers",
            "buttons",
            "lightings",
            "illuminations",
            "motions",
            "noises",
            "temperatures",
            "states",
            "positions"
          ],
          "additionalProperties": false
        },
        "properties": {
          "type": "object",
          "properties": {
            "blocks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/definitions/BlockType"
                  },
                  "fromMin": {
                    "type": "number"
                  },
                  "toMin": {
                    "type": "number"
                  }
                },
                "required": ["type", "fromMin", "toMin"],
                "additionalProperties": false
              },
              "description": "* 1. Блокировка действий по времени\n\nПозволяет заблокировать изменение состояния шторы в заданном временном диапазоне.\n\nВозможно указать какое именно действие блокировать: [  {type: \"OPEN\", fromMin: 23 * 60, toMin: 9 * 60 },  {type: \"CLOSE\", fromMin: 11 * 60, toMin: 16 * 60 },  {type: \"ANY\", fromMin: 21 * 60, toMin: 22 * 60 } ]\n\nЭто полезно когда нужно приостановить выполнение автоматических функций.\n\nВ случае когда мы не хотим открывать штору с ночи до определенно времени дня например гарантированно до 10 дня, мы зададим [{type: \"OPEN\", fromMin: 0 * 60, toMin: 10 * 60 }].\n\nВ случае когда мы гарантированно не хотим закрывать шторы в середине дня, мы зададим [{type: \"CLOSE\", fromMin: 11 * 60, toMin: 16 * 60 }].\n\nВ случае когда мы хотим запретить все автоматические действия, скажем перед сном [{type: \"ANY\", fromMin: 20 * 60, toMin: 23 * 60 }].\n\nВ результате мы получим настройку [  {type: \"OPEN\", fromMin: 0 * 60, toMin: 10 * 60 },  {type: \"CLOSE\", fromMin: 11 * 60, toMin: 16 * 60 },  {type: \"ANY\", fromMin: 20 * 60, toMin: 23 * 60 } ]\n\nЭто базовая настройка, задается для:\n- Предотвращения не нужных переключений утром и ночью.\n- Для обеспечения достаточного времени инсоляции."
            },
            "switcher": {
              "type": "object",
              "properties": {
                "trigger": {
                  "$ref": "#/definitions/Trigger",
                  "description": "Позволяет указать, на какое состояние переключателя реагировать, верхнее или нижнее."
                },
                "type": {
                  "$ref": "#/definitions/SwitchType",
                  "description": "Позволяет разделить приоритет на типы переключателей."
                },
                "blockMin": {
                  "type": "number",
                  "description": "Позволяет заблокировать все автоматические действия на заданное время.\n\nЕсли указать 0 минут, то блокировка не включится."
                }
              },
              "required": ["trigger", "type", "blockMin"],
              "additionalProperties": false,
              "description": "* 2. Открыть/Остановить/Закрыть через кнопку либо через реальную\n* либо через виртуальную. Классический способ переключать состояние шторы, при котором нужно нажимать на кнопку.\n\nСпособ является приоритетным над всеми остальными, и может выставлять блокировку на изменения состояния, на заданное время.\n\nТо есть в случае открывания/закрывания кнопкой, штора в любом случае изменит состояние, и автоматические действия будут заблокированы на время указанное в настройках.\n\nЧтобы реализовать функциональность открыть/закрыть все шторы, нужно сделать экземпляр макроса, куда добавить одну виртуальную кнопу и все шторы.\n\nНажимая на неё через приложение, все шторы будут получать команды.\n\n* 3. Открыть по геркону Позволяет начать открывать шторы при отрывании двери.\n\nОткрывание шторы блокируется датчиком освещенности."
            },
            "openCloseByTime": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "direction": {
                    "$ref": "#/definitions/OpenCloseByTimeDirection"
                  },
                  "blockMin": {
                    "type": "number"
                  },
                  "timePointMin": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                },
                "required": ["direction", "blockMin", "timePointMin"],
                "additionalProperties": false
              },
              "description": "* 4. Открыть/Закрыть по времени Позволяет указать в какой час нужно изменить состояние шторы.\n\n{   direction: \"OPEN\",   blockMin: 2 * 60,   timePointMin: [1 * 60,4 * 60,6 * 60,8 * 60] } Штора будет пытаться открыться в 1, 4, 6, 8 часов и после каждой попытки будут блокироваться автоматические действия на заданное время.\n\n{  direction: \"CLOSE\",  blockMin: 8 * 60,  timePointMin: [18 * 60,20 * 60,0 * 60] } Штора будет пытаться закрыться в 18, 20, 0, часов и после каждой попытки будут блокироваться автоматические действия на заданное время.\n\nПри пересечении времени, приоритет будет отдан операции CLOSE."
            },
            "illumination": {
              "type": "object",
              "properties": {
                "detection": {
                  "$ref": "#/definitions/LevelDetection"
                },
                "low": {
                  "type": "object",
                  "properties": {
                    "closeLux": {
                      "type": "number",
                      "description": "Если значение меньше closeLux штора закрывается. Значение рассматривается только при открытой шторе."
                    },
                    "openLux": {
                      "type": "number",
                      "description": "Если значение больше openLux штора откроется при появлении движения. Значение рассматривается только при закрытой шторе."
                    }
                  },
                  "required": ["closeLux", "openLux"],
                  "additionalProperties": false,
                  "description": "Позволяет определить день или ночь."
                },
                "hi": {
                  "type": "object",
                  "properties": {
                    "closeLux": {
                      "type": "number",
                      "description": "Если значение больше closeLux штора закроется. Значение рассматривается только при открытой шторе."
                    },
                    "openLux": {
                      "type": "number",
                      "description": "Если значение меньше openLux штора откроется. Значение рассматривается только при закрытой шторе."
                    }
                  },
                  "required": ["closeLux", "openLux"],
                  "additionalProperties": false,
                  "description": "Позволяет определить излишне солнечный день или нет."
                },
                "mod": {
                  "type": "object",
                  "properties": {
                    "close": {
                      "type": "number"
                    },
                    "open": {
                      "type": "number"
                    }
                  },
                  "required": ["close", "open"],
                  "additionalProperties": false,
                  "description": "Количественные модификаторы для closeLux и openLux значений.\n\nПри наличии освещения, closeLux * mod.close, а openLux * mod.open."
                }
              },
              "required": ["detection", "low", "hi", "mod"],
              "additionalProperties": false,
              "description": "* 5. Открыть/Закрыть по освещенности Позволяет закрывать штору при наступлении ночи и в излишне солнечный день."
            },
            "motion": {
              "type": "object",
              "properties": {
                "detection": {
                  "$ref": "#/definitions/LevelDetection"
                },
                "trigger": {
                  "type": "number",
                  "description": "Задает чувствительность к движению."
                }
              },
              "required": ["detection", "trigger"],
              "additionalProperties": false,
              "description": "* 6. Движение и шум Блокирует открывание по освещенности, в случае полной тишины.\n\nДополнительные данные, позволяют определять полную тишину.\n\nПри нарушении тишины и достаточной освещенности, штора откроется."
            },
            "noise": {
              "type": "object",
              "properties": {
                "detection": {
                  "$ref": "#/definitions/LevelDetection"
                },
                "trigger": {
                  "type": "number",
                  "description": "Задает чувствительность к шуму."
                }
              },
              "required": ["detection", "trigger"],
              "additionalProperties": false
            },
            "silenceMin": {
              "type": "number",
              "description": "Определение полной тишины.\n\nЗначение задается в минутах.\n\nЕсли > 0, то в случае отсутствия шума и движения устанавливается полная тишина.\n\nЕсли указать <= 0, то полная тишина устанавливаться не будет."
            },
            "temperature": {
              "type": "object",
              "properties": {
                "detection": {
                  "$ref": "#/definitions/LevelDetection"
                }
              },
              "required": ["detection"],
              "additionalProperties": false
            },
            "closeBySun": {
              "type": "object",
              "properties": {
                "illumination": {
                  "type": "object",
                  "properties": {
                    "closeLux": {
                      "type": "number",
                      "description": "Если освещенность больше closeLux и температура больше temperature штора закрывается.\n\nЗначение рассматривается только при открытой шторе."
                    },
                    "openLux": {
                      "type": "number",
                      "description": "Если освещенность меньше openLux штора закрывается.\n\nЗначение рассматривается только при закрытой шторе."
                    }
                  },
                  "required": ["closeLux", "openLux"],
                  "additionalProperties": false
                },
                "temperature": {
                  "type": "number"
                }
              },
              "required": ["illumination", "temperature"],
              "additionalProperties": false,
              "description": "* 7. Закрыть по солнечной активности Позволяет закрыть штору, если освещенность и температура выше уставок."
            },
            "state": {
              "type": "object",
              "properties": {
                "open": {
                  "type": "string",
                  "description": "Выбирается пользователем из enum который предоставляет устройство."
                },
                "close": {
                  "type": "string",
                  "description": "Выбирается пользователем из enum который предоставляет устройство."
                },
                "stop": {
                  "type": "string",
                  "description": "Выбирается пользователем из enum который предоставляет устройство."
                }
              },
              "required": ["open", "close", "stop"],
              "additionalProperties": false
            },
            "position": {
              "type": "object",
              "properties": {
                "open": {
                  "type": "number",
                  "description": "Значение при полностью открытом положении"
                },
                "close": {
                  "type": "number",
                  "description": "Значение при полностью закрытом положении"
                }
              },
              "required": ["open", "close"],
              "additionalProperties": false
            }
          },
          "required": [
            "blocks",
            "switcher",
            "openCloseByTime",
            "illumination",
            "motion",
            "noise",
            "silenceMin",
            "temperature",
            "closeBySun",
            "state",
            "position"
          ],
          "additionalProperties": false
        }
      },
      "required": ["devices", "properties"],
      "additionalProperties": false,
      "description": "! Cover macros scenarios\n\nВ описание роль крышки будет играть штора, но вместо шторы могут быть любые другие  устройства типа Cover https://www.zigbee2mqtt.io/guide/usage/exposes.html#specific\n\nШторы управляются при помощи:  Кнопок  Виртуальная кнопка (дает возможность управлять через приложение)  Герконов  Освещенности  Движения  Шума  Температуре  Времени\n\n* 1. Блокировка действий по времени\n\nПозволяет заблокировать изменение состояния шторы в заданном временном диапазоне.\n\nВозможно указать какое именно действие блокировать: [  {type: \"OPEN\", fromMin: 23 * 60, toMin: 9 * 60 },  {type: \"CLOSE\", fromMin: 11 * 60, toMin: 16 * 60 },  {type: \"ANY\", fromMin: 21 * 60, toMin: 22 * 60 } ]\n\nЭто полезно когда нужно приостановить выполнение автоматических функций.\n\nВ случае когда мы не хотим открывать штору с ночи до определенно времени дня например гарантированно до 10 дня, мы зададим [{type: \"OPEN\", fromMin: 0 * 60, toMin: 10 * 60 }].\n\nВ случае когда мы гарантированно не хотим закрывать шторы в середине дня, мы зададим [{type: \"CLOSE\", fromMin: 11 * 60, toMin: 16 * 60 }].\n\nВ случае когда мы хотим запретить все автоматические действия, скажем перед сном [{type: \"ANY\", fromMin: 20 * 60, toMin: 23 * 60 }].\n\nВ результате мы получим настройку [  {type: \"OPEN\", fromMin: 0 * 60, toMin: 10 * 60 },  {type: \"CLOSE\", fromMin: 11 * 60, toMin: 16 * 60 },  {type: \"ANY\", fromMin: 20 * 60, toMin: 23 * 60 } ]\n\nЭто базовая настройка, задается для:\n- Предотвращения не нужных переключений утром и ночью.\n- Для обеспечения достаточного времени инсоляции.\n\n* 2. Открыть/Остановить/Закрыть через кнопку либо через реальную либо через виртуальную. Классический способ переключать состояние шторы, при котором нужно нажимать на кнопку.\n\nСпособ является приоритетным над всеми остальными, и может выставлять блокировку на изменения состояния, на заданное время.\n\nТо есть в случае открывания/закрывания кнопкой, штора в любом случае изменит состояние,  и автоматические действия будут заблокированы на время указанное в настройках.\n\nЧтобы реализовать функциональность открыть/закрыть все шторы, нужно сделать экземпляр  макроса, куда добавить одну виртуальную кнопу и все шторы.\n\nНажимая на неё через приложение, все шторы будут получать команды.\n\n* 3. Открыть по геркону Позволяет начать открывать шторы при отрывании двери.\n\nОткрывание шторы блокируется датчиком освещенности.\n\n* 4. Открыть/Закрыть по времени Позволяет указать в какой час нужно изменить состояние шторы.\n\n{   direction: \"OPEN\",   blockMin: 2 * 60,   timePointMin: [1 * 60,4 * 60,6 * 60,8 * 60] } Штора будет пытаться открыться в 1, 4, 6, 8 часов и после каждой попытки будут блокироваться автоматические действия на заданное время.\n\n{  direction: \"CLOSE\",  blockMin: 8 * 60,  timePointMin: [18 * 60,20 * 60,0 * 60] } Штора будет пытаться закрыться в 18, 20, 0, часов и после каждой попытки будут блокироваться автоматические действия на заданное время.\n\nПри пересечении времени, приоритет будет отдан операции CLOSE.\n\n* 5. Открыть/Закрыть по освещенности Позволяет закрывать штору при наступлении ночи и в излишне солнечный день, и открывать при наступлении для и уменьшении солнечной активности.\n\n* 6. Движение и шум Блокирует открывание по освещенности, в случае полной тишины.\n\nДополнительные данные, позволяют определять полную тишину.\n\nПри нарушении тишины и достаточной освещенности, штора откроется.\n\n* 7. Закрыть по солнечной активности Позволяет закрыть штору, если освещенность, температура выше уставок и установилась полная тишина."
    },
    "BlockType": {
      "type": "string",
      "enum": ["OPEN", "CLOSE", "ALL"],
      "description": "Типы блокировок."
    },
    "Trigger": {
      "type": "string",
      "enum": ["UP", "DOWN"],
      "description": "Определяет по верхнему (\"1\", +5, true) или по нижнему (\"0\", 0, false) уровню случится реакция. Значение по умолчанию DOWN."
    },
    "SwitchType": {
      "type": "string",
      "enum": ["BUTTON", "SEALED_CONTACT", "RELAY"],
      "description": "Тип переключателя (кнопка, геркон).\n\nОт типа зависит приоритет у кнопки максимальный приоритет, после идет геркон.\n\nДля геркона уже будут проверяться имеющиеся блокировки действий."
    },
    "OpenCloseByTimeDirection": {
      "type": "string",
      "enum": ["OPEN", "CLOSE"],
      "description": "Направление движения крышки."
    },
    "LevelDetection": {
      "type": "string",
      "enum": ["MAX", "MIN", "AVG"],
      "description": "Правило определения числового значения по нескольким датчикам MAX - берем максимальное среди всех MIN - берем минимальное среди всех AVG - берем среднее среди всех"
    }
  }
}
