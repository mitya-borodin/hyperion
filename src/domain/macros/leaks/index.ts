/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable unicorn/no-empty-file */
import debug from 'debug';
import defaultsDeep from 'lodash.defaultsdeep';

import { stringify } from '../../../helpers/json-stringify';
import { ControlType } from '../../control-type';
import { Macros, MacrosParameters } from '../macros';
import { MacrosType } from '../showcase';

const logger = debug('hyperion:macros:leaks');

/**
 * ! SETTINGS
 */
export enum ValueState {
  OPEN = 'OPEN',
  ON_WAY = 'ON_WAY',
  CLOSE = 'CLOSE',
}

export enum ValveType {
  PHASE = 'PHASE',
  ANALOG = 'ANALOG',
  ZIGBEE = 'ZIGBEE',
}

/**
 * –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Ç–µ—á–µ–∫.
 *
 * –ö—Ä–∞–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–≤–æ–¥–µ –≤–æ–¥—ã –≤ –¥–æ–º, –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö, –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –∏ –≥–æ—Ä—è—á–µ–π –≤–æ–¥–µ.
 */
export type LeaksMacrosSettings = {
  /**
   * –¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∞–Ω–æ–º, –±—ã–≤–∞—é—Ç –∫—Ä–∞–Ω—ã, –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª–æ–∂–µ–Ω–∏—è,
   *  —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫—Ä–∞–π–Ω–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π, –∞–Ω–∞–ª–æ–≥–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 0-10–í, –∫—Ä–∞–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –ø–æ zigbee2mqtt.
   */
  readonly type: ValveType;

  /**
   * –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∫—Ä–∞–Ω —Å –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –∑–∞–¥–∞–µ—Ç—Å—è –ø–æ—Ä—Ç –≤—ã–¥–∞—é—â–∏–π 0-10 –≤–æ–ª—å—Ç,
   * –Ω–∞ —Å–∞–º–æ–º –∫—Ä–∞–Ω–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è, 0 –æ—Ç–∫—Ä—ã—Ç–æ, 10 –∑–∞–∫—Ä—ã—Ç–æ.
   */
  readonly analog?: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.RANGE;
  };

  /**
   * –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∫—Ä–∞–Ω —Å —Ñ–∞–∑–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å 2-3, –¥–ª—è –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫—Ä–∞–Ω–æ–≤.
   *
   * –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 2, —Ç–æ –ø–µ—Ä–≤—ã–π —ç—Ç–æ OPEN, –≤—Ç–æ—Ä–æ–π CLOSE.
   * –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 3, —Ç–æ –ø–µ—Ä–≤—ã–π —ç—Ç–æ OPEN, –≤—Ç–æ—Ä–æ–π CLOSE, —Ç—Ä–µ—Ç–∏–π ON/OFF.
   */
  readonly phase?:
    | [
        {
          readonly deviceId: string;
          readonly controlId: string;
          readonly controlType: ControlType.SWITCH;
        },
        {
          readonly deviceId: string;
          readonly controlId: string;
          readonly controlType: ControlType.SWITCH;
        },
      ]
    | [
        {
          readonly deviceId: string;
          readonly controlId: string;
          readonly controlType: ControlType.SWITCH;
        },
        {
          readonly deviceId: string;
          readonly controlId: string;
          readonly controlType: ControlType.SWITCH;
        },
        {
          readonly deviceId: string;
          readonly controlId: string;
          readonly controlType: ControlType.SWITCH;
        },
      ];

  /**
   * –°–∏–≥–Ω–∞–ª—ã –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∞–Ω–æ–≤.
   *
   * –ï—Å–ª–∏ type: 'PHASE' —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–≤–µ –ø–æ–∑–∏—Ü–∏–∏ [OPEN, CLOSE],
   * –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π –ø–µ—Ä–≤–∞—è –≤—Å–µ–≥–¥–∞ OPEN –≤—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ CLOSE, –¥–ª—è –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫—Ä–∞–Ω–æ–≤.
   */
  readonly positions?: [
    {
      readonly deviceId: string;
      readonly controlId: string;
      readonly controlType: ControlType.SWITCH;
    },
    {
      readonly deviceId: string;
      readonly controlId: string;
      readonly controlType: ControlType.SWITCH;
    },
  ];

  /**
   * –î–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏.
   *
   * –°–≤—è–∑—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—Ä–∞–Ω–∞ —Å –≥—Ä—É–ø–ø–æ–π –¥–∞—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ç–µ—á–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, —Ç–æ –∫—Ä–∞–Ω –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è,
   * –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –ø—Ä–æ—Ç–µ—á–∫–∞, –∫—Ä–∞–Ω –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
   *
   * TODO –°–¥–µ–ª–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏—é, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–æ–¥—ã —á–µ—Ä–µ–∑ –∞–ø—Ä—É–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   *
   * –¢–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Ç–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –ø—Ä–æ—Ç–µ–∫–ª–æ, –≤—ã—Å–æ—Ö–ª–æ –ø—Ä–æ—Ç–µ–∫–ª–æ, –≤—ã—Å–æ—Ö–ª–æ –∏ —Ç–∞–∫ –ø–æ –∫—Ä—É–≥—É.
   */
  readonly leaks: Array<{
    readonly deviceId: string;
    readonly controlId: string;
  }>;
};

/**
 * ! STATE
 */
export type LeaksMacrosPublicState = {};

type LeaksMacrosPrivateState = {
  valve: ValueState;
  leak: boolean;
};

type LeaksMacrosState = LeaksMacrosPublicState & LeaksMacrosPrivateState;

/**
 * ! OUTPUT
 */
type LeaksMacrosNextOutput = {
  /**
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º –∫—Ä–∞–Ω–æ–º, 0 –æ—Ç–∫—Ä—ã—Ç–æ, 10 –∑–∞–∫—Ä—ã—Ç–æ.
   */
  readonly analog?: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly value: string;
  };

  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ª–µ, –¥–ª—è —Ñ–∞–∑–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º –∫—Ä–∞–Ω–æ–º.
   *
   * 0 - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç–æ
   * 1 - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–∫—Ä—ã—Ç–æ
   * 2 - –ü–æ–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è
   */
  readonly phase?: [
    {
      readonly deviceId: string;
      readonly controlId: string;
      readonly value: string;
    },
    {
      readonly deviceId: string;
      readonly controlId: string;
      readonly value: string;
    },
    {
      readonly deviceId: string;
      readonly controlId: string;
      readonly value: string;
    },
  ];
};

const VERSION = 0;

type LeaksMacrosParameters = MacrosParameters<string, string | undefined>;

export class LeaksMacros extends Macros<MacrosType.LEAKS, LeaksMacrosSettings, LeaksMacrosState> {
  private nextOutput: LeaksMacrosNextOutput;

  constructor(parameters: LeaksMacrosParameters) {
    const settings = LeaksMacros.parseSettings(parameters.settings, parameters.version);
    const state = LeaksMacros.parseState(parameters.state);

    super({
      /**
       * –í–µ—Ä—Å–∏—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞
       */
      version: VERSION,

      eventBus: parameters.eventBus,

      type: MacrosType.LEAKS,

      id: parameters.id,

      name: parameters.name,
      description: parameters.description,
      labels: parameters.labels,

      settings,

      state: defaultsDeep(state, {
        disable: {
          coldWater: false,
          hotWater: false,
          recirculation: false,
        },
        hotWaterTemperature: 60,
        coldWaterPumps: {},
        valves: {},
        boilerPumps: {},
        heatRequests: {},
        recirculationPumps: {},
      }),

      devices: parameters.devices,
      controls: parameters.controls,
    });

    this.nextOutput = {
      analog: undefined,
      phase: undefined,
    };
  }

  static parseSettings = (settings: string, version: number = VERSION): LeaksMacrosSettings => {
    // if (version === VERSION) {
    //   logger('Settings in the current version ‚úÖ');
    //   logger(stringify({ from: version, to: VERSION }));

    // /**
    //  * TODO –ü—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ JSON Schema
    //  */

    //   return JSON.parse(settings);
    // }

    // logger('Migrate settings was started üöÄ');
    // logger(stringify({ from: version, to: VERSION }));

    // const mappers = [() => {}].slice(version, VERSION + 1);

    // logger(mappers);

    // const result = mappers.reduce((accumulator, mapper) => mapper(accumulator), JSON.parse(settings));

    // logger(stringify(result));
    // logger('Migrate settings was finished ‚úÖ');

    return JSON.parse(settings);
  };

  static parseState = (state?: string): LeaksMacrosState => {
    if (!state) {
      return {
        valve: ValueState.ON_WAY,
        leak: false,
      };
    }

    /**
     * TODO –ü—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ JSON Schema
     */

    return JSON.parse(state);
  };

  setState = (nextPublicState: string): void => {};

  protected priorityComputation = () => {
    return false;
  };

  protected computation = () => {};

  protected collecting() {}

  protected computeOutput = (value: string) => {
    const nextOutput: LeaksMacrosNextOutput = {
      analog: undefined,
      phase: undefined,
    };

    this.nextOutput = nextOutput;

    logger('The next output was computed ‚è≠Ô∏è üçã');
    logger(
      stringify({
        name: this.name,
        nextState: this.state,
        nextOutput: this.nextOutput,
      }),
    );
  };

  protected send = () => {};

  protected destroy() {}

  /**
   * ! INTERNAL_IMPLEMENTATION
   */
}
