import cloneDeep from 'lodash.clonedeep';
import defaultsDeep from 'lodash.defaultsdeep';

import { getLogger } from '../../../infrastructure/logger';
import { ControlType } from '../../control-type';
import { Macros, MacrosParameters } from '../macros';
import { MacrosType } from '../showcase';

const logger = getLogger('hyperion:macros:counter');
/**
 * ! SETTINGS
 */
/**
 * –¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞, –ø–æ —Ç–∏–ø—É —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
 */
export enum CounterType {
  UNSPECIFIED = 'UNSPECIFIED',

  /**
   * –£—á–µ—Ç —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã, –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö.
   */
  COLD_WATER = 'COLD_WATER',

  /**
   * –£—á–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã, –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö.
   */
  HOT_WATER = 'HOT_WATER',

  /**
   * –£—á–µ—Ç –≥–∞–∑–∞, –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö.
   */
  GAS = 'GAS',

  /**
   * –£—á–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞, –≤ –∫–∏–ª–æ –≤–∞—Ç–∞—Ö –≤ —á–∞—Å.
   */
  ELECTRICITY = 'ELECTRICITY',

  /**
   * –£—á–µ—Ç —Ç–µ–ø–ª–∞, –≤ –∫–∏–ª–æ –≤–∞—Ç–∞—Ö –≤ —á–∞—Å.
   */
  HEAT = 'HEAT',

  /**
   * –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–≥–¥–∞ —Ä–µ–ª–µ –≤–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
   */
  RELAY_ON = 'RELAY_ON',

  /**
   * –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–≥–¥–∞ —Ä–µ–ª–µ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
   */
  RELAY_OFF = 'RELAY_OFF',

  /**
   * –£—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π, –≤ —Ä–∞–∑–∞—Ö.
   */
  SWITCH = 'SWITCH',
}

export enum UnitOfMeasurement {
  UNSPECIFIED = 'UNSPECIFIED',

  /**
   * –û–±—ä–µ–º.
   */
  VOLUME = 'm^3',

  /**
   * –ú–æ—â–Ω–æ—Å—Ç—å.
   */
  POWER = 'kW/h',

  /**
   * –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã.
   */
  WORK_TIME = 'sec',

  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.
   */
  TIMES = 'times',
}

export enum CounterTrigger {
  /**
   * –†–µ–∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–º–∫–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ—Å–ª–µ —Ä–∞–∑–æ–º–∫–Ω—É—Ç–æ–≥–æ.
   */
  FRONT = 'FRONT',

  /**
   * –†–µ–∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–∑–æ–º–∫–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ—Å–ª–µ –∑–∞–º–∫–Ω—É—Ç–æ–≥–æ.
   */
  BACK = 'BACK',

  /**
   * –†–µ–∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
   */
  BOTH = 'BOTH',
}

/**
 * –ò–º–ø—É–ª—å—Å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
 * –≤–æ–¥—ã,
 * –≥–∞–∑–∞,
 * —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞,
 * —Ç–µ–ø–ª–∞,
 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–≤–µ—Ä—Ö–Ω–∏—Ö, –Ω–∏–∂–Ω–∏—Ö) —É—Ä–æ–≤–Ω–µ–π –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è—Ö,
 * –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏/–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ—è —Ä–µ–ª–µ.
 */
export type CounterMacrosSettings = {
  readonly devices: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.SWITCH;
  };

  readonly properties: {
    readonly type: CounterType;
    readonly trigger: CounterTrigger;
    readonly price: number;
  };
};

/**
 * ! STATE
 */
export type CounterMacrosPublicState = {
  value: number;
};

// eslint-disable-next-line @typescript-eslint/ban-types
type CounterMacrosPrivateState = {};

type CounterMacrosState = CounterMacrosPublicState & CounterMacrosPrivateState;

/**
 * ! OUTPUT
 */
type CounterMacrosNextOutput = {
  readonly value: number;
  readonly unitOfMeasurement: UnitOfMeasurement;
};

const VERSION = 0;

type CounterMacrosParameters = MacrosParameters<string, string | undefined>;

const defaultState: CounterMacrosState = {
  value: 0,
};

const createDefaultState = () => {
  return cloneDeep(defaultState);
};

export class CounterMacros extends Macros<MacrosType.COUNTER, CounterMacrosSettings, CounterMacrosState> {
  private output: CounterMacrosNextOutput;

  constructor(parameters: CounterMacrosParameters) {
    const settings = CounterMacros.parseSettings(parameters.settings, parameters.version);
    const state = CounterMacros.parseState(parameters.state);

    super({
      /**
       * –í–µ—Ä—Å–∏—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞
       */
      version: VERSION,

      eventBus: parameters.eventBus,

      type: MacrosType.COUNTER,

      id: parameters.id,

      name: parameters.name,
      description: parameters.description,
      labels: parameters.labels,

      settings,

      state: defaultsDeep(state, { value: 0 }),

      devices: parameters.devices,
      controls: parameters.controls,
    });

    this.output = {
      value: 0,
      unitOfMeasurement: UnitOfMeasurement.UNSPECIFIED,
    };
  }

  private getDebugContext = (mixin = {}) => {
    return {
      name: this.name,
      now: this.now,
      state: this.state,
      mixin,
      output: this.output,
    };
  };

  static parseSettings = (settings: string, version: number = VERSION): CounterMacrosSettings => {
    return Macros.migrate(settings, version, VERSION, [], 'settings');
  };

  static parseState = (state?: string, version: number = VERSION): CounterMacrosState => {
    if (!state) {
      return createDefaultState();
    }

    return Macros.migrate(state, version, VERSION, [], 'state');
  };

  setState = (nextPublicState: string): void => {};

  protected collecting() {}

  protected priorityComputation = () => {
    return false;
  };

  protected actionBasedComputing = (): boolean => {
    return false;
  };
  protected sensorBasedComputing = (): boolean => {
    return false;
  };

  protected computeOutput = () => {
    const output: CounterMacrosNextOutput = {
      value: 0,
      unitOfMeasurement: UnitOfMeasurement.UNSPECIFIED,
    };

    this.output = output;

    logger.info('The next output was computed üçã');
    logger.debug(this.getDebugContext());
  };

  protected send = () => {};

  protected destroy() {}
}
