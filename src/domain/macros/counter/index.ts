import cloneDeep from 'lodash.clonedeep';
import defaultsDeep from 'lodash.defaultsdeep';

import { getLogger } from '../../../infrastructure/logger';
import { ControlType } from '../../control-type';
import { Macros, MacrosParameters } from '../macros';
import { MacrosType } from '../showcase';

const logger = getLogger('hyperion:macros:counter');

/**
 * ! SETTINGS
 */

/**
 * –¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞, –ø–æ —Ç–∏–ø—É —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
 */
export enum CounterType {
  /**
   * –£—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–º–ø—É–ª—å—Å–æ–≤.
   *
   * –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
   */
  IMPULSE_COUNT = 'IMPULSE_COUNT',

  /**
   * –£—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ª–µ.
   */
  RELAY_SWITCH_COUNT = 'RELAY_SWITCH_COUNT',

  /**
   * –£—á–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞, –≤ –∫–∏–ª–æ –≤–∞—Ç–∞—Ö –≤ —á–∞—Å.
   */
  ELECTRICITY = 'ELECTRICITY',

  /**
   * –£—á–µ—Ç –≥–∞–∑–∞, –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö.
   */
  GAS = 'GAS',

  /**
   * –£—á–µ—Ç —Ç–µ–ø–ª–∞, –≤ –∫–∏–ª–æ –≤–∞—Ç–∞—Ö –≤ —á–∞—Å.
   */
  HEAT = 'HEAT',

  /**
   * –£—á–µ—Ç —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã, –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö.
   */
  COLD_WATER = 'COLD_WATER',

  /**
   * –£—á–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã, –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö.
   */
  HOT_WATER = 'HOT_WATER',
}

export enum UnitOfMeasurement {
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π.
   *
   * –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
   */
  SWITCHES = 'switches',

  /**
   * –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, —Å—É–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤, –æ—Ç –≤–∫–ª—é—á–µ–Ω–∏—è
   * —Ä–µ–ª–µ –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è.
   */
  WORK = 'sec',

  /**
   * –û–±—ä–µ–º.
   */
  VOLUME = 'm^3',

  /**
   * –ú–æ—â–Ω–æ—Å—Ç—å.
   */
  POWER = 'kW/h',
}

/**
 * –¢–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏.
 */
export enum Trigger {
  /**
   * –†–µ–∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–º–∫–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ—Å–ª–µ —Ä–∞–∑–æ–º–∫–Ω—É—Ç–æ–≥–æ.
   */
  FRONT = 'FRONT',

  /**
   * –†–µ–∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–∑–æ–º–∫–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ—Å–ª–µ –∑–∞–º–∫–Ω—É—Ç–æ–≥–æ.
   */
  BACK = 'BACK',

  /**
   * –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
   *
   * –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ CounterType –∫—Ä–æ–º–µ RELAY_SWITCH_COUNT
   * –¥–ª—è RELAY_SWITCH_COUNT –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç FRONT.
   */
  BOTH = 'BOTH',
}

/**
 * –ò–º–ø—É–ª—å—Å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
 *
 * –≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∫–ª—é—á –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ
 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞ —Ç–æ –∑–∞–º—ã–∫–∞–µ—Ç—Å—è —Ç–æ —Ä–∞–∑–º—ã–∫–∞–µ—Ç—Å—è.
 *
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞—è —á–∞—Å—Ç–æ—Ç—É –≤–∫–ª—é—á–µ–Ω–∏–π-–≤—ã–∫–ª—é—á–µ–Ω–∏–π –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–∞ —Ä–µ—Å—É—Ä—Å–∞,
 * –ø–æ—Å—á–∏—Ç–∞–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ–±—ä–µ–º —Ä–∞—Å—Ö–æ–¥–∞ —Ä–µ—Å—É—Ä—Å–∞,
 * –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è –≤–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –º–æ—Ç–æ—á–∞—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–µ–ª–µ.
 *
 * –ú–∞–∫—Ä–æ—Å –∏–º–ø—É–ª—å—Å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –º–æ–∂–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å:
 * - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤ (—Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞)
 * - –ú–æ—Ç–æ—á–∞—Å—ã –∏–ª–∏ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ (—Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞)
 * - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
 * - –ì–∞–∑
 * - –¢–µ–ø–ª–æ
 * - –í–æ–¥—É
 */
export type CounterMacrosSettings = {
  readonly devices: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.SWITCH;
  };

  readonly properties: {
    readonly type: CounterType;
    readonly trigger: Trigger;
    readonly initOfMeasurement: UnitOfMeasurement;

    /**
     * –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞.
     *
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0, —Ä–µ—Å—É—Ä—Å –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
     * —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –∫–∞–∂–¥–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.
     */
    readonly price: number;
  };
};

/**
 * ! STATE
 */
/**
 * –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å.
 */
export type CounterMacrosPublicState = {
  /**
   * –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
   * –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞ –∏ –º–∞–∫—Ä–æ—Å–∞.
   */
  readonly amount: number;
};

/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å.
 */
type CounterMacrosPrivateState = {
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤.
   */
  counter: number;

  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫ —Ä–µ–ª–µ.
   *
   * –ú–æ—Ç–æ—á–∞—Å—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è CounterType => RELAY_SWITCH_COUNT
   */
  workSec: number;
};

type CounterMacrosState = CounterMacrosPublicState & CounterMacrosPrivateState;

/**
 * ! OUTPUT
 */
type CounterMacrosNextOutput = {
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤.
   */
  readonly counter: number;

  /**
   * –ú–æ—Ç–æ—á–∞—Å—ã, > 0 –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ CounterType => RELAY_SWITCH_COUNT.
   */
  readonly workSec: number;

  /**
   * –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è.
   */
  readonly amount: number;
  readonly unitOfMeasurement: UnitOfMeasurement;
};

const VERSION = 0;

type CounterMacrosParameters = MacrosParameters<string, string | undefined>;

const defaultState: CounterMacrosState = {
  counter: 0,
  workSec: 0,
  amount: 0,
};

const createDefaultState = () => {
  return cloneDeep(defaultState);
};

export class CounterMacros extends Macros<MacrosType.COUNTER, CounterMacrosSettings, CounterMacrosState> {
  private output: CounterMacrosNextOutput;

  constructor(parameters: CounterMacrosParameters) {
    const settings = CounterMacros.parseSettings(parameters.settings, parameters.version);
    const state = CounterMacros.parseState(parameters.state);

    super({
      /**
       * –í–µ—Ä—Å–∏—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞
       */
      version: VERSION,

      eventBus: parameters.eventBus,

      type: MacrosType.COUNTER,

      id: parameters.id,

      name: parameters.name,
      description: parameters.description,
      labels: parameters.labels,

      settings,

      state: defaultsDeep(state, { value: 0 }),

      devices: parameters.devices,
      controls: parameters.controls,
    });

    this.output = {
      counter: -1,
      workSec: -1,
      amount: -1,
      unitOfMeasurement: UnitOfMeasurement.SWITCHES,
    };
  }

  private getDebugContext = (mixin = {}) => {
    return {
      name: this.name,
      now: this.now,
      state: this.state,
      mixin,
      output: this.output,
    };
  };

  static parseSettings = (settings: string, version: number = VERSION): CounterMacrosSettings => {
    return Macros.migrate(settings, version, VERSION, [], 'settings');
  };

  static parseState = (state?: string, version: number = VERSION): CounterMacrosState => {
    if (!state) {
      return createDefaultState();
    }

    return Macros.migrate(state, version, VERSION, [], 'state');
  };

  setState = (nextPublicState: string): void => {};

  protected collecting() {}

  protected priorityComputation = () => {
    return false;
  };

  protected actionBasedComputing = (): boolean => {
    return false;
  };
  protected sensorBasedComputing = (): boolean => {
    return false;
  };

  protected computeOutput = () => {
    const output: CounterMacrosNextOutput = {
      counter: -1,
      workSec: -1,
      amount: -1,
      unitOfMeasurement: UnitOfMeasurement.SWITCHES,
    };

    this.output = output;

    logger.info('The next output was computed üçã');
    logger.debug(this.getDebugContext());
  };

  protected send = () => {};

  protected destroy() {}
}
