/* eslint-disable unicorn/no-empty-file */
import debug from 'debug';
import cloneDeep from 'lodash.clonedeep';
import defaultsDeep from 'lodash.defaultsdeep';

import { stringify } from '../../../helpers/json-stringify';
import { ControlType } from '../../control-type';
import { Macros, MacrosParameters } from '../macros';
import { MacrosType } from '../showcase';

const logger = debug('hyperion:macros:boiler');

/**
 * ! Boiler macros scenarios
 *
 * –ú–∞–∫—Ä–æ—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π–ª–µ—Ä–∞,
 *  –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏.
 */

/**
 * ! SETTINGS
 */

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
 */
export enum DeviceState {
  ON = 'ON',
  OFF = 'OFF',
}

/**
 * –ü–µ—Ä–µ—á–µ–Ω—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–∞–∫—Ä–æ—Å–∞.
 */
export type BoilerMacrosSettings = {
  /**
   * –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
   */
  readonly temperature: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.TEMPERATURE;
  };

  /**
   * –ù–∞—Å–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏.
   */
  readonly pump: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.SWITCH;
  };

  /**
   * –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–ø–ª–∞.
   *
   * –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω –º–∞–∫—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ø–ª–∞.
   */
  readonly heat: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.HEAT_SOURCE;
  }>;
};

/**
 * ! STATE
 */
export type BoilerMacrosPublicState = {
  /**
   * –£—Å—Ç–∞–≤–∫–∞, –¥–æ –∫–∞–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥—Ä–µ—Ç—å –≥–æ—Ä—è—á—É—é –≤–æ–¥—É.
   *
   * –ï—Å–ª–∏ —É—Å—Ç–∞–≤–∫–∞ –º–µ–Ω—å—à–µ 60, —Ç–æ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤, –≤–æ–¥–∞ –±—É–¥–µ—Ç –Ω–∞–≥—Ä–µ—Ç–∞ –¥–æ 60.
   * –ï—Å–ª–∏ —É—Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ 75 –≥—Ä–∞–¥—É—Å–æ–≤ —Ç–æ –≤–æ–¥–∞ –±—É–¥–µ—Ç –Ω–∞–≥—Ä–µ–≤–∞—Ç—å—Å—è –¥–æ 75 –≥—Ä–∞–¥—É—Å–æ–≤.
   *
   * –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π 40 - 75 –≥—Ä–∞–¥—É—Å–æ–≤.
   */
  temperatureTarget: number;
};

export type BoilerMacrosPrivateState = {
  /**
   * –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
   */
  temperature: number;

  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞—Å–æ—Å–∞.
   */
  pump: DeviceState;
};

type BoilerMacrosState = BoilerMacrosPublicState & BoilerMacrosPrivateState;

const defaultState: BoilerMacrosState = {
  temperatureTarget: 60,
  temperature: 60,
  pump: DeviceState.OFF,
};

const createDefaultState = () => cloneDeep(defaultState);

/**
 * ! OUTPUT
 */
type BoilerMacrosNextOutput = {
  pump?: {
    readonly deviceId: string;
    readonly controlId: string;
    readonly value: string;
  };
  heat: Array<{
    readonly deviceId: string;
    readonly controlId: string;
    readonly controlType: ControlType.HEAT_SOURCE;
    readonly value: number;
  }>;
};

/**
 * –í–µ—Ä—Å–∏—è –º–∞–∫—Ä–æ—Å–∞, –∫ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Å—Ö–µ–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∏—Ö –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ,
 *  —Ç–∞–∫ –∂–µ –∫ —Å—Ö–µ–º–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
 */
const VERSION = 0;

/**
 * ! CONSTRUCTOR PARAMS
 */
type BoilerMacrosParameters = MacrosParameters<string, string | undefined>;

export class BoilerMacros extends Macros<MacrosType.BOILER, BoilerMacrosSettings, BoilerMacrosState> {
  private nextOutput: BoilerMacrosNextOutput;

  constructor(parameters: BoilerMacrosParameters) {
    const settings = BoilerMacros.parseSettings(parameters.settings, parameters.version);
    const state = BoilerMacros.parseState(parameters.state);

    super({
      /**
       * –í–µ—Ä—Å–∏—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞
       */
      version: VERSION,

      eventBus: parameters.eventBus,

      type: MacrosType.BOILER,

      id: parameters.id,

      name: parameters.name,
      description: parameters.description,
      labels: parameters.labels,

      settings,

      state: defaultsDeep(state, createDefaultState()),

      devices: parameters.devices,
      controls: parameters.controls,
    });

    this.nextOutput = {
      pump: undefined,
      heat: [],
    };
  }

  static parseSettings = (settings: string, version: number = VERSION): BoilerMacrosSettings => {
    return Macros.migrate(settings, version, VERSION, [], 'settings');
  };

  static parseState = (state?: string, version: number = VERSION): BoilerMacrosState => {
    if (!state) {
      return createDefaultState();
    }

    return Macros.migrate(state, version, VERSION, [], 'state');
  };

  static parsePublicState = (state?: string, version: number = VERSION): BoilerMacrosPublicState => {
    if (!state) {
      return createDefaultState();
    }

    return Macros.migrate(state, version, VERSION, [], 'state');
  };

  setState = (nextPublicState: string): void => {};

  protected collecting() {}

  protected priorityComputation = () => {
    return false;
  };

  protected actionBasedComputing = (): boolean => {
    return false;
  };
  protected sensorBasedComputing = (): boolean => {
    return false;
  };

  protected computeOutput = () => {
    const nextOutput: BoilerMacrosNextOutput = {
      pump: undefined,
      heat: [],
    };

    this.nextOutput = nextOutput;

    logger('The next output was computed ‚è≠Ô∏è üçã');
    logger(
      stringify({
        name: this.name,
        nextState: this.state,
        nextOutput: this.nextOutput,
      }),
    );
  };

  protected send = () => {};

  protected destroy() {}

  /**
   * ! INTERNAL_IMPLEMENTATION
   */
}
