/* eslint-disable unicorn/no-empty-file */
// import debug from 'debug';

// import { stringify } from '../../../helpers/json-stringify';
// import { HyperionDevice } from '../../hyperion-device';
// import { Macros, MacrosAccept, MacrosParameters } from '../macros';
// import { MacrosType } from '../showcase';

// const logger = debug('hyperion-water-supply-macros');

// /**
//  * ! SETTINGS
//  */
// export type WaterSupplyMacrosSettings = {
//   readonly devices: {
//     /**
//      * –°—á–µ—Ç—á–∏–∫ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã.
//      *
//      * –î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤.
//      */
//     readonly coldWaterCounter: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//     }>;

//     /**
//      * –†–µ–ª–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞—Å–æ—Å–∞ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è.
//      *
//      * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞—Å–æ—Å–∞ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ—Ç–µ—á–∫–∏.
//      *
//      * –î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞—Å–æ—Å–æ–≤.
//      *
//      * –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ù–û (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ) —Ä–µ–ª–µ,
//      *  —á—Ç–æ–±—ã –ø—Ä–∏ –ø—Ä–æ–ø–∞–¥–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è —Ä–µ–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–æ—Å—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.
//      */
//     readonly pump: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//     }>;

//     /**
//      * –î–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏.
//      */
//     readonly leaks: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//     }>;

//     /**
//      * –°–∏–≥–Ω–∞–ª—ã –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∞–Ω–æ–≤.
//      */
//     readonly positions: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//     }>;

//     /**
//      * –ö—Ä–∞–Ω—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ—Ç–µ—á–∫–∏.
//      */
//     readonly valve: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//       readonly type: 'PHASE' | 'ANALOG';

//       /**
//        * –î–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏.
//        */
//       readonly leaks: Array<{
//         readonly deviceId: string;
//         readonly controlId: string;
//       }>;

//       /**
//        * –°–∏–≥–Ω–∞–ª—ã –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∞–Ω–æ–≤.
//        *
//        * –ï—Å–ª–∏ type: 'PHASE' —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ–¥–∏–Ω ON –¥—Ä—É–≥–æ–π OFF.
//        */
//       readonly positions: Array<{
//         readonly deviceId: string;
//         readonly controlId: string;
//         readonly state: 'ON' | 'OFF';
//       }>;
//     }>;

//     /**
//      * –°—á–µ—Ç—á–∏–∫ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã.
//      *
//      * –î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤.
//      */
//     readonly hotWaterCounter: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//     }>;

//     /**
//      * –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–æ–π–ª–µ—Ä–∞.
//      */
//     readonly boilerTemperature: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;
//     }>;

//     /**
//      * –ù–∞—Å–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π–ª–µ—Ä–∞.
//      *
//      * –î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–æ—Å–æ–≤, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –±–æ–π–ª–µ—Ä–∞–º.
//      *
//      * –†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π–ª–µ—Ä–∞.
//      */
//     readonly boilerPump: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;

//       /**
//        * –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–ø–ª–∞, –≤
//        * –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ø–ª–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–π–ª–µ—Ä–∞.
//        */
//       readonly heatSources: string[];
//     }>;

//     /**
//      * –ù–∞—Å–æ—Å —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ –ì–í–°.
//      *
//      * –î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–æ—Å–æ–≤.
//      */
//     readonly recyclingPump: Array<{
//       readonly deviceId: string;
//       readonly controlId: string;

//       /**
//        * –í —Å–ª—É—á–∞–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –Ω–∞ delayMin
//        */
//       readonly switcher: Array<{
//         readonly deviceId: string;
//         readonly controlId: string;
//         readonly trigger: string;
//         readonly delayMin: number;
//       }>;

//       /**
//        * –í —Å–ª—É—á–∞–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –Ω–∞ delayMin
//        */
//       readonly motion: Array<{
//         readonly deviceId: string;
//         readonly controlId: string;
//         readonly trigger: number;
//         readonly delayMin: number;
//       }>;

//       /**
//        * –í —Å–ª—É—á–∞–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —à—É–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –Ω–∞ delayMin
//        */
//       readonly noise: Array<{
//         readonly deviceId: string;
//         readonly controlId: string;
//         readonly trigger: number;
//         readonly delayMin: number;
//       }>;

//       /**
//        * –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ—Ç–µ—á–∫–∏, —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è.
//        */
//       readonly leaks: Array<{
//         readonly deviceId: string;
//         readonly controlId: string;
//       }>;

//       /**
//        * –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏.
//        *
//        * –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —Ç–æ —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤—Å–µ –≤—Ä–µ–º—è.
//        *
//        * –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –≤—Å–µ –æ–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
//        *  —Ä–µ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞.
//        *
//        * –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO '2024-03-16T07:31:20.331Z'.
//        */
//       readonly schedule: Array<{
//         from: string;
//         to: string;
//       }>;
//     }>;
//   };

//   readonly properties: {
//     readonly coldWaterCounter: {
//       readonly ticBy: 'FRONT' | 'BACK' | 'BOTH';
//       readonly valueByTic: number;
//     };
//     readonly hotWaterCounter: {
//       readonly ticBy: 'FRONT' | 'BACK' | 'BOTH';
//       readonly valueByTic: number;
//     };
//   };
// };

// /**
//  * ! STATE
//  */
// export type WaterSupplyMacrosPublicState = {
//   water: 'ON' | 'OFF';
//   timer: 'FORCE' | 'DEFAULT';
//   hotWaterTemperature: number;
// };

// type WaterSupplyMacrosPrivateState = {
//   isLeak: boolean;
//   pump: 'ON' | 'OFF';
//   valve: 'ON' | 'OFF';
//   recycling: 'ON' | 'OFF';
// };

// type WaterSupplyMacrosState = WaterSupplyMacrosPublicState & WaterSupplyMacrosPrivateState;

// /**
//  * ! OUTPUT
//  */
// type WaterSupplyMacrosNextOutput = {
//   readonly pump: Array<{
//     readonly deviceId: string;
//     readonly controlId: string;
//     readonly value: string;
//   }>;
//   readonly valve: Array<{
//     readonly deviceId: string;
//     readonly controlId: string;
//     readonly device: 'PHASE' | 'VALVE' | 'ANALOG';
//     readonly functionality: 'OPENING' | 'CLOSING' | 'POWER' | 'SIGNAL' | 'POSITION';
//     readonly value: string;
//   }>;
//   readonly boilerPump: Array<{
//     readonly deviceId: string;
//     readonly controlId: string;
//     readonly value: string;
//   }>;
// };

// type WaterSupplyMacrosParameters = MacrosParameters<WaterSupplyMacrosSettings, WaterSupplyMacrosPublicState>;

// export class WaterSupplyMacros extends Macros<
//   MacrosType.WATER_SUPPLY,
//   WaterSupplyMacrosSettings,
//   WaterSupplyMacrosState
// > {
//   private nextOutput: WaterSupplyMacrosNextOutput;

//   constructor(parameters: WaterSupplyMacrosParameters) {
//     super({
//       ...parameters,
//       type: MacrosType.WATER_SUPPLY,
//       state: {
//         water: 'OFF',
//         timer: 'DEFAULT',
//         hotWaterTemperature: 60,
//         isLeak: false,
//         pump: 'OFF',
//         valve: 'OFF',
//         recycling: 'OFF',
//       },
//       controlTypes: {
//         leaks: ControlType.SWITCH,
//         coldWaterCounter: ControlType.SWITCH,
//         hotWaterCounter: ControlType.SWITCH,
//         pump: ControlType.SWITCH,
//         valve: ControlType.SWITCH,
//         recycling: ControlType.SWITCH,
//         hotWaterTemperature: ControlType.TEMPERATURE,
//         boilerPump: ControlType.SWITCH,
//       },
//     });

//     this.nextOutput = {
//       pump: [],
//       valve: [],
//       boilerPump: [],
//     };
//   }

//   setState = (nextState: WaterSupplyMacrosState): void => {};

//   accept = ({ previous, current, devices, controls }: MacrosAccept): void => {
//     super.accept({ previous, current, devices, controls });

//     if (this.isDevicesReady() && this.isControlValueHasBeenChanged(current)) {
//       this.execute();
//     }
//   };

//   protected execute = () => {
//     let interrupt = this.applyPublicState();

//     if (interrupt) {
//       return;
//     }

//     interrupt = this.applyInput();

//     if (interrupt) {
//       return;
//     }

//     this.applyExternalToState();
//   };

//   protected applyPublicState = () => {
//     return false;
//   };

//   protected applyInput = () => {
//     return false;
//   };

//   protected applyExternalToState() {}

//   protected computeOutput = (value: string) => {
//     const nextOutput: WaterSupplyMacrosNextOutput = {
//       pump: [],
//       valve: [],
//       boilerPump: [],
//     };

//     this.nextOutput = nextOutput;

//     logger('The next output was computed ‚è≠Ô∏è üçã');
//     logger(
//       stringify({
//         name: this.name,
//         nextState: this.state,
//         nextOutput: this.nextOutput,
//       }),
//     );
//   };

//   protected applyNextOutput = () => {};

//   /**
//    * ! –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
//    */
//   protected isControlValueHasBeenChanged = (device: HyperionDevice): boolean => {
//     return super.isControlValueHasBeenChanged(device);
//   };

//   protected isSwitchHasBeenUp = (): boolean => {
//     return super.isSwitchHasBeenUp(this.settings.leaks);
//   };

//   protected isSwitchHasBeenDown = (): boolean => {
//     return super.isSwitchHasBeenDown(this.settings.leaks);
//   };
// }
