// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_PG_DATABASE_URL")
}

model Settings {
  name  String @unique
  value String

  @@map("_settings")
}

model User {
  id String @id @default(uuid())

  email  String @unique
  name   String
  role   String
  status String @default("ACTIVE")

  salt String?
  hash String?

  isTwoFaActivated Boolean @default(false)
  twoFaSecret      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  refreshSessions RefreshSession[]
}

model RefreshSession {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  refreshToken String   @unique
  fingerprint  String
  expiresIn    DateTime

  createdAt DateTime @default(now())
}

// Device используется для:
// 1. Просмотра данных устройства
// 2. Изменение данных прям на устройстве
model Device {
  deviceId String @id

  driver String @default("UNSPECIFIED")
  title  String @default("{}")
  error  String @default("{}")
  meta   String @default("{}")

  // Используется для разметки устройств пользовательскими данными
  markup String @default("{}")

  // Используется для поиска пользователем
  labels String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  controls Control[]
  history  History[]
}

// Control используется для:
// 1. Установки в макрос как вход или выход
// 2. Анализа исторических данных
model Control {
  device   Device @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
  deviceId String

  controlId String

  title     String  @default("{}")
  order     Int     @default(0)
  readonly  Boolean @default(true)
  type      String  @default("UNSPECIFIED")
  units     String  @default("UNSPECIFIED")
  max       Float   @default(0)
  min       Float   @default(0)
  precision Float   @default(0)
  value     String  @default("0")
  topic     String  @default("UNSPECIFIED")
  error     String  @default("UNSPECIFIED")
  meta      String  @default("{}")

  // Используется для разметки устройств пользовательскими данными
  markup String @default("{}")

  // Используется для поиска пользователем
  labels String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  history History[]

  @@unique([deviceId, controlId])
}

// History используется для:
// 1. Просмотр истории
// 2. Вход для макроса
model History {
  id String @id @default(uuid())

  device   Device @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
  deviceId String

  control   Control @relation(fields: [deviceId, controlId], references: [deviceId, controlId], onDelete: Cascade)
  controlId String

  value String @default("0")
  error String @default("UNSPECIFIED")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Macros это:
// 1. Заранее разработанный код, реализующий какой-либо аспект автоматизации, может быть произвольно слдожный.

// Macros может быть:
// 1. Использован как единственный экземпляр.
// 2. Один тип может быть инстанцирован несколько раз, контроль количества находится в реализации макроса.
// 3. Использован как вход для другого/гих макросов.

// Macros может быть использован как:
// 1. Котроллер отопления, включая в себя все необходимые концепты как комнаты, температура улицы, подача, обратка котел и так далее.
// 2. Контроллер паралельной загрузки бойлера.
// 3. Контроллер вентиляции.
// 4. Контроллер освещения.
// 5. Контроллер снеготаяния.
// 6. Контроллер кондиционирования.
// 7. Контроллер увлажнения.
// 8. Контроллер бассейна.
// 9. Контроллер парилки.
// 10. Контроллер водоснабжения.
// 11. Контроллер доступа.
// 12. Контроллер охраны.
// 13. И так далее все, что необходимо может быть запрограммировано как Macros.

// Macros хранит в БД настройки которые инициализируются в момент 
// запуска приложения, вся последующая работа выполняется в памяти приложения.
model Macros {
  id String @id @default(uuid())

  type     String
  labels   String[]
  settings Json

  name        String
  description String
}
