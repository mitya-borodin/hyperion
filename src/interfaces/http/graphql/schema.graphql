enum ControlType {
  UNSPECIFIED
  SWITCH
  ILLUMINATION
  TEXT
  ENUM
  VALUE
  VOLTAGE
  TEMPERATURE
  RANGE
  PUSH_BUTTON
  PRESSURE
  SOUND_LEVEL
  REL_HUMIDITY
  ATMOSPHERIC_PRESSURE
  HEAT_SOURCE
}

enum SubscriptionDeviceType {
  CONNECTION_ESTABLISHED
  APPEARED
  MARKED_UP
  VALUE_IS_SET
}

enum SubscriptionMacrosType {
  CONNECTION_ESTABLISHED
  SETUP
  UPDATE
  DESTROY
  OUTPUT_APPEARED
}

directive @auth(requires: [UserRole!]!) on OBJECT | FIELD_DEFINITION

scalar Upload

type DefaultOutput {
  message: String
}

type Error {
  code: Int!
  message: String!
}

input PaginationInput {
  page: Int = 1
  limit: Int = 25
}

type PaginationOutput {
  total: Int!
  page: Int!
  limit: Int!
}

input TitleInput {
  ru: String!
  en: String!
}

type TitleOutput {
  ru: String!
  en: String!
}

input MarkupInput {
  title: TitleInput!
  description: String!
  order: Int!
  color: String!
}

type MarkupOutput {
  title: TitleOutput!
  description: String!
  order: Int!
  color: String!
}

input MarkupDevice {
  deviceId: ID!

  labels: [String!]!

  markup: MarkupInput!
}

input MarkupControl {
  deviceId: ID!
  controlId: ID!

  labels: [String!]!

  markup: MarkupInput!
}

type Control {
  id: ID!

  title: TitleOutput!
  order: Int!
  readonly: Boolean!
  type: ControlType!
  units: String!
  max: Float!
  min: Float!
  precision: Float!
  value: String!
  topic: String
  error: String!
  meta: String!

  labels: [String!]!

  markup: MarkupOutput!
}

type Device {
  id: ID!

  driver: String!
  title: TitleOutput!

  error: String!
  meta: String!

  labels: [String!]!

  markup: MarkupOutput!

  controls: [Control!]!
}

input SetControlValue {
  deviceId: String!
  controlId: String!

  value: String!
}

"""
MacrosShowcase

Витрина доступных макросов для установки.

Каждый MacrosShowcase содержит json schema для settings и state.
"""
type MacrosShowcase {
  type: ID!
  name: String!
  description: String!

  settings: String!
  state: String!
}

"""
MacrosSetup

По type это тип макроса полученный из ветрины макросов.

Данные для заполнения settings и state собираются в соответствии Json Schema в
витрине макроса, и передаются в виде Json Text.
"""
input MacrosSetup {
  type: ID!
  id: ID!

  name: String!
  description: String!

  labels: [String!]!

  settings: String!
  state: String!
}

"""
Macros

По type это тип макроса полученный из ветрины макросов, является уникальный идентификатиоромом типа макроса.

Данные переданные в момент setup settings и state возвращаются в виде Json Text.
"""
type Macros {
  type: ID!
  id: ID!

  name: String!
  description: String!

  labels: [String!]!

  settings: String!
  state: String!
}

type MacrosOutput {
  macros: Macros!
  error: Error!
}

input DestroyMacrosInput {
  id: ID!
}

type DestroyMacrosOutput {
  error: Error!
}

type DeviceSubscriptionEvent {
  type: SubscriptionDeviceType!
  items: [Device!]!
  error: Error!
}

type MacrosSubscriptionEvent {
  type: SubscriptionMacrosType!
  macros: [Macros!]!
  error: Error!
}

type Query {
  ## Authentication and Access
  #
  getUser(input: GetUserInput!): UserOutput @auth(requires: [ADMIN])
  getUsers(input: GetUsersInput!): GetUsersOutput @auth(requires: [ADMIN])

  ## Hardware
  #
  getMacrosShowcase: [MacrosShowcase!]! @auth(requires: [ADMIN, OPERATOR, VIEWER])
}

type Mutation {
  ## Authentication and Access
  #
  signIn(input: SignInInput!): SignInOutput
  signOut: DefaultOutput @auth(requires: [ADMIN, OPERATOR, VIEWER])

  createUser(input: CreateUserInput!): CreateUserOutput @auth(requires: [ADMIN])
  deleteUser(input: DeleteUserInput!): DefaultOutput @auth(requires: [ADMIN])

  setPassword(input: SetPasswordInput!): DefaultOutput @auth(requires: [ADMIN])
  setRole(input: SetRoleInput!): DefaultOutput @auth(requires: [ADMIN])

  activateTwoFa: ActivateTwoFaOutput @auth(requires: [ADMIN, OPERATOR, VIEWER])
  confirmTwoFa(input: ConfirmTwoFaInput!): DefaultOutput @auth(requires: [ADMIN, OPERATOR, VIEWER])
  verifyTwoFa(input: VerifyTwoFaInput!): TwoFaOtpOutput
  deactivateTwoFa(input: DeactivateTwoFaInput!): DefaultOutput @auth(requires: [ADMIN, OPERATOR, VIEWER])

  refreshAccessToken: RefreshAccessTokenOutput

  ## Hardware
  #
  setControlValue(input: SetControlValue!): Device! @auth(requires: [ADMIN, OPERATOR])

  markupDevice(input: MarkupDevice!): Device! @auth(requires: [ADMIN, OPERATOR])
  markupControl(input: MarkupControl!): Device! @auth(requires: [ADMIN, OPERATOR])

  setupMacros(input: MacrosSetup!): MacrosOutput!
  destroyMacros(input: DestroyMacrosInput!): DestroyMacrosOutput! @auth(requires: [ADMIN, OPERATOR])
}

type Subscription {
  ## Hardware
  #
  device: DeviceSubscriptionEvent!
  macros: MacrosSubscriptionEvent!
}
